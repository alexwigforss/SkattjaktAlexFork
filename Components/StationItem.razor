@using Skattjakt.Data

<div class="station-row">
    <div class="move-buttons-container">
        @if (Index > 0)
        {
            <button class="move-up-or-down-button" @onclick="MoveUp"><img class="move-up-or-down-image" src="/Assets/caret-top.svg" alt="move up" /></button>
        }
        @if (Index < TotalStations - 1)
        {
            <button class="move-up-or-down-button" @onclick="MoveDown"><img class="move-up-or-down-image" src="/Assets/caret-bottom.svg" alt="move down" /></button>
        }
    </div>
    <div class="station-id">@(Index + 1)</div>
    <button class="settings-button" type="button" @onclick="ToggleSettings"><img class="settings-button-image" src="/Assets/cog.svg" alt="settings" /></button>
    @if (Station != null)
    {
        <input class="station-name-input" type="text" @bind="Station.Name" placeholder="Ange stationens namn" />
    }

    <button class="delete-station-button" type="button" @onclick="DeleteStation"><img class="delete-button-image" src="/Assets/trash.svg" alt="delete" /></button>
    @if (IsSettingsOpen)
    {
        <div class="settings-window">
            <div class="settings-content">
                <div class="settings-title-row">
                    @if (IsEditing)
                    {
                        <input class="station-name-settings-input" type="text" @bind="Station.Name" placeholder="@Station.Name" />
                        <button type="button" class="edit-toggle-button" @onclick="ToggleEdit"><img class="edit-toggle-image" src="/Assets/check.svg" alt="edit" /></button>
                    }
                    else
                    {
                        <p class="settings-title" @onclick="ToggleEdit">@(Station?.Name == null ? "Ange stationens namn" : $"{Station?.Name}")</p>
                        <button type="button" class="edit-toggle-button" @onclick="ToggleEdit"><img class="edit-toggle-image" src="/Assets/pencil.svg" alt="edit" /></button>
                    }
                </div>
                <p class="settings-paragraph">Latitude: @Station?.Location.Latitude</p>
                <p class="settings-paragraph">Longitude: @Station?.Location.Longitude</p>
                <label for="Assignment">Ange stationens uppdrag</label>
                <textarea id="Assignment" cols="50" rows="5" class="station-assignment-textarea" @bind="Station.Assignment"></textarea>
                <button type="button" class="confirm-settings-button" @onclick="ToggleSettings">Spara inställningar</button>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public Station? Station { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public int TotalStations { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveUp { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveDown { get; set; }

    // Prepare for deleting a station, pass the method from the parent component to this component
    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    // Properties for toggling settings and editing
    private bool IsSettingsOpen { get; set; } = false;
    private bool IsEditing { get; set; } = false;

    // Methods for moving stations up and down in the list of stations
    private async Task MoveUp()
    {
        await OnMoveUp.InvokeAsync(Index);
    }

    private async Task MoveDown()
    {
        await OnMoveDown.InvokeAsync(Index);
    }

    private async Task DeleteStation()
    {
        if (Station != null)
        {
            await OnDelete.InvokeAsync(Station.PointOnMapGuid);
        }
    }

    /// <summary>
    /// Method for toggling the settings window
    /// </summary>
    private void ToggleSettings()
    {
        IsSettingsOpen = !IsSettingsOpen;
    }

    /// <summary>
    /// Method for toggling the edit station name
    /// </summary>
    private void ToggleEdit()
    {
        IsEditing = !IsEditing;
    }
}
