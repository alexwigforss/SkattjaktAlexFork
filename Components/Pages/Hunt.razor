@page "/Jakt/{mapName}"
@using Skattjakt.Data
@using static Skattjakt.Data.HaversineDistance
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@inject IJSRuntime jsR
@inject TreasureMapService treasureMapService;
@inject NavigationManager Navigation

<h1 class="map-name-title">Skattjakt @Map.Name</h1>

<div class="show-stations">
    @if (showMap)
    {
        <RealTimeMap Parameters="@parameters" height="460px" width="620px"></RealTimeMap>
    }

    <div class="station-table">
        @for (int i = 0; i < Locations.Count; i++)
        {
            <StationItem Station="@Locations[i]" Index=@i TotalStations="@Locations.Count"/>
        }
    </div>
</div>

@if (clientPosition != null)
{
    <div>
        Current Position :
        <ul>
            <li>Goal: @clientPosition.Location.Coords.Latitude, @clientPosition.Location.Coords.Longitude</li>
            <li> </li>
            <li>Student: @clientCoordinate.Latitude, @clientCoordinate.Longitude</li>
            <li> </li>
            <li>Distance: @metersBetween</li>


        </ul>
    </div>
}

@code {
    bool showMap = true;
    static double lat = 57.588987;
    static double lng = 15.181287;

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationResult clientPosition;
    private LocationCoordinate clientCoordinate;
    private LocationCoordinate goalCoordinate;
    private int metersBetween;
    // private List<GeolocationPosition> positionHistory = new List<GeolocationPosition>();

    [Parameter]
    public string MapName { get; set; }

    public List<Station> Locations = new List<Station>();

    private TreasureMap Map { get; set; }

    protected override void OnInitialized()
    {
        Map = new TreasureMap(MapName);
        treasureMapService.AddMap(Map);
        System.Diagnostics.Debug.Print("INITIALIZED");
    }
    protected override async Task OnInitializedAsync()
    {
        var window = await jsR.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        await GetGeoLocation();
        goalCoordinate = new LocationCoordinate(clientPosition.Location.Coords.Latitude,clientPosition.Location.Coords.Longitude);
        clientCoordinate = new LocationCoordinate(clientPosition.Location.Coords.Latitude - 1.0,clientPosition.Location.Coords.Longitude-1.0);
        metersBetween = CalculateHaversineDistance(clientCoordinate, goalCoordinate);
        System.Diagnostics.Debug.Print("INITIALIZED ASYNC");
    }

    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()
        {
            location = new RealTimeMap.Location()
            {
                latitude = lat,
                longitude = lng,
            },
            zoom_level = 10
        };

    public async Task GetGeoLocation()
    {
        clientPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            }
        ));
    }
}
