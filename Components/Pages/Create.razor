@page "/Skapa/{mapName}"
@using LeafletForBlazor
@using Skattjakt.Data
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@using System.Diagnostics
@inject IJSRuntime jsR
@inject NavigationManager NavManager
@inject TreasureMapService treasureMapService
@inject NavigationManager Navigation

<h1 class="map-name-title">@Map!.Name</h1>
<div class="create-stations">
    @if (parameters != null)
    {
        <RealTimeMap @ref="realTimeMap" Parameters="@parameters" height="460px" width="620px" OnClickMap="AddPositonAndStreamPoint"></RealTimeMap>
    }

    <div class="station-table">
        @for (int i = 0; i < Locations.Count; i++)
        {
            <StationItem Station="@Locations[i]" Index=@i TotalStations="@Locations.Count" OnMoveUp="MoveUp" OnMoveDown="MoveDown" />
        }
    </div>
</div>

<button type="button" @onclick="GetGeoLocation">Hitta Position</button>
<button type="button" @onclick="NavigateToSetup">Till Inställningar</button>
<p>Vidare till vilkor...</p>

@if (currentPosition != null)
{
    <div>
        Current Position :
        <ul>
            <li>Latitude: @currentPosition.Location.Coords.Latitude </li>
            <li>Longitude: @currentPosition.Location.Coords.Longitude</li>
            <li>Altitude: @currentPosition.Location.Coords.Altitude</li>
            <li>Accuracy: @currentPosition.Location.Coords.Accuracy</li>
            <li>AltitudeAccuracy: @currentPosition.Location.Coords.AltitudeAccuracy</li>
            <li>Heading: @currentPosition.Location.Coords.Heading</li>
            <li>Speed: @currentPosition.Location.Coords.Speed</li>
        </ul>
    </div>
}
@foreach (var item in positionHistory)
{
    <div>
        <ul>
            <li>@item.Coords.Latitude</li>
            <li>@item.Coords.Longitude</li>
        </ul>
    </div>
}
@code {
    [Parameter]
    public string? MapName { get; set; }

    /// <summary>
    /// List of Stations that will be displayed as StationItem components
    /// </summary>
    public List<Station> Locations = new List<Station>();

    /// <summary>
    /// List of StreamPoints that will be displayed on the map
    /// </summary>
    public List<RealTimeMap.StreamPoint> StreamPoints = new List<RealTimeMap.StreamPoint>();

    /// <summary>
    /// Reference to the RealTimeMap component
    /// </summary>
    RealTimeMap? realTimeMap;
    RealTimeMap.LoadParameters? parameters = null;

    /// <summary>
    /// A Map object that will be added to the TreasureMapService when all stations are added and validated
    /// </summary>
    private TreasureMap? Map { get; set; }

    private WindowNavigatorGeolocation? geolocationWrapper;
    private GeolocationResult? currentPosition;
    private List<GeolocationPosition> positionHistory = new List<GeolocationPosition>();
    private IAsyncDisposable? geopositionWatcher;

    protected override void OnInitialized()
    {
        Map = new TreasureMap(MapName!);
        treasureMapService.AddMap(Map);
        System.Diagnostics.Debug.Print("INITIALIZED");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        System.Diagnostics.Debug.Print("AFTER INITIALIZED ASYNC");
        var window = await jsR.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        await GetGeoLocation();

        parameters = new RealTimeMap.LoadParameters()
        {
            location = new RealTimeMap.Location()
            {
                latitude = currentPosition!.Location.Coords.Latitude,
                longitude = currentPosition.Location.Coords.Longitude,
            },
            zoom_level = 17
        };
    }

    public async Task GetGeoLocation()
    {
        currentPosition = (await geolocationWrapper!.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            }
        ));
    }

    /// <summary>
    /// Moves a station up in the list of stations
    /// </summary>
    /// <param name="index">The current index of the station</param>
    private void MoveUp(int index)
    {
        if (index > 0)
        {
            Skattjakt.Data.Station temp = Locations[index];
            Locations[index] = Locations[index - 1];
            Locations[index - 1] = temp;

            StreamPoints[index].value = index;
            StreamPoints[index-1].value = index+1;

            realTimeMap!.Geometric.Points.update(StreamPoints[index]);
            realTimeMap.Geometric.Points.update(StreamPoints[index-1]);

            MoveUpInStreamPoints(index);
        }
    }
    /// <summary>
    /// Move the streampoint up in StreamPoints
    /// </summary>
    /// <param name="index"></param>
    private void SwapStreamPointValues(int indexA,int indexB)
    {}
    private void MoveUpInStreamPoints(int index)
    {
        if (index > 0)
        {
            // Find the StreamPoints that correspond to the Locations being swapped
            var streamPoint1 = StreamPoints[index];
            var streamPoint2 = StreamPoints[index - 1];

            // Swap the StreamPoints if both are found
            if (streamPoint1 != null && streamPoint2 != null)
            {
                StreamPoints[index] = streamPoint2;
                StreamPoints[index - 1] = streamPoint1;
            }
        }
    }

    /// <summary>
    /// Moves a station down in the list of stations
    /// Replace values of the realTimeMap points
    /// </summary>
    /// <param name="index">The current index of the station</param>
    private void MoveDown(int index)
    {
        if (index < Locations.Count - 1)
        {
            Skattjakt.Data.Station temp = Locations[index];
            Locations[index] = Locations[index + 1];
            Locations[index + 1] = temp;

            StreamPoints[index].value = index + 2;
            StreamPoints[index + 1].value = index + 1;

            System.Diagnostics.Debug.Print(StreamPoints[index].value.ToString() + " " + StreamPoints[index + 1].value.ToString());

            realTimeMap!.Geometric.Points.update(StreamPoints[index]);
            realTimeMap.Geometric.Points.update(StreamPoints[index + 1]);
            MoveDownInStreamPoints(index);

        }
    }
    /// <summary>
    /// Move the streampoint down in StreamPoints
    /// </summary>
    /// <param name="index"></param>
    private void MoveDownInStreamPoints(int index)
    {
        if (index < Locations.Count - 1)
        {
            // Find the StreamPoints that correspond to the Locations being swapped
            var streamPoint1 = StreamPoints[index];
            var streamPoint2 = StreamPoints[index + 1];

            // Swap the StreamPoints if both are found
            if (streamPoint1 != null && streamPoint2 != null)
            {
                StreamPoints[index] = streamPoint2;
                StreamPoints[index + 1] = streamPoint1;
            }
        }
    }
    /// <summary>
    /// Adds a station to the list of stations when the map is clicked
    /// </summary>
    /// <param name="clickPosition">The longitude and latitude where the user clicked</param>
    /// Förslag, byt namn till AddPositonAndStreamPoint
    public void AddPositonAndStreamPoint(RealTimeMap.ClicksMapArgs clickPosition)
    {
        // Add a new station that will be displayed in the list of stations
        Locations.Add(new Station() 
        { 
            Location = new LocationCoordinate(clickPosition.location.latitude, clickPosition.location.longitude),
            Name = $"{clickPosition.location.latitude}, {clickPosition.location.longitude}",
            Id = Locations.Count + 1
        });

        // Add a new StreamPoint to the list of StreamPoints that will be displayed on the map
        StreamPoints.Add(new RealTimeMap.StreamPoint() 
        { 
            latitude = clickPosition.location.latitude, 
            longitude = clickPosition.location.longitude,
            guid = Guid.NewGuid(),
            // The value is set to the Id of the latest created station
            value = Locations.Last().Id.ToString()
        });

        // Define the appearance of the points on the map
        realTimeMap!.Geometric.Points.Appearance().pattern = new RealTimeMap.PointSymbol()
        {
            color = "red",
            fillColor = "red",
            fillOpacity = 0.7,
            radius = 10,
        };

        // Define the appearance of the points tooltip
        realTimeMap.Geometric.Points.Appearance().pattern = new RealTimeMap.PointTooltip()
        {
            // the value is set when the StreamPoint is created and added to the StreamPoint list
            content = "${value}",
            opacity = 0.8,
            permanent = true
        };

        // Upload the StreamPoints to the map
        realTimeMap.Geometric.Points.upload(StreamPoints, true);
    }
    /// <summary>
    /// TODO Save the map (Made it async because that may take some time)
    /// And navigate to setup page
    /// </summary>
    /// <returns></returns>
    private async Task NavigateToSetup()
    {
        await Task.Delay(100);
        NavManager.NavigateTo($"/Vilkor/{Map!.Name}");
    }
}
