@page "/Skapa/{mapName}"
@using Skattjakt.Data
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation
@inject IJSRuntime jsR
@implements IAsyncDisposable

@inject TreasureMapService treasureMapService;
@inject NavigationManager Navigation

<h1 class="map-name-title">@Map.Name</h1>
<div class="create-stations">
  @if (parameters != null)
    {
        <RealTimeMap Parameters="@parameters" height="460px" width="620px"></RealTimeMap>
    }

    <div class="station-table">
        @for (int i = 0; i < Locations.Count; i++)
        {
            <StationItem Station="@Locations[i]" Index=@i TotalStations="@Locations.Count" OnMoveUp="MoveUp" OnMoveDown="MoveDown"/>
        }
    </div>
</div>
<button class="fake-location-button" type="button" @onclick="CreateFakeLocation">Lägg till position</button>

<button type="button" @onclick="GetGeoLocation">Get Pos</button>
<button type="button" @onclick="WatchPosition">Watch Pos</button>
<button type="button" @onclick="StopWatch">Stop Watch Pos</button>

 @if (currentPosition != null)
{
    <div>
        Current Position :
        <ul>
            <li>Latitude: @currentPosition.Location.Coords.Latitude </li>
            <li>Longitude: @currentPosition.Location.Coords.Longitude</li>
            <li>Altitude: @currentPosition.Location.Coords.Altitude</li>
            <li>Accuracy: @currentPosition.Location.Coords.Accuracy</li>
            <li>AltitudeAccuracy: @currentPosition.Location.Coords.AltitudeAccuracy</li>
            <li>Heading: @currentPosition.Location.Coords.Heading</li>
            <li>Speed: @currentPosition.Location.Coords.Speed</li>
        </ul>
    </div>
}
@foreach (var item in positionHistory)
{
    <div>
        <ul>
            <li>@item.Coords.Latitude</li>
            <li>@item.Coords.Longitude</li>
        </ul>
    </div>
}
@code {
    static string? latstring { get; set; }
    static string? lngstring { get; set; }
    static double lat = 44.1107672;
    static double lng = 26.4501715;

    [Parameter]
    public string MapName { get; set; }

    public List<Station> Locations = new List<Station>();

    public List<LocationCoordinate> FakeLocations = new List<LocationCoordinate>()
    {
        new LocationCoordinate(59.3293, 18.0686),
        new LocationCoordinate(57.7089, 11.9746),
        new LocationCoordinate(55.604981, 13.003822),
        new LocationCoordinate(63.8258, 20.2630),
        new LocationCoordinate(65.5848, 22.1547),
        new LocationCoordinate(59.8586, 17.6389),
        new LocationCoordinate(59.6162, 16.5528),
        new LocationCoordinate(58.4108, 15.6214),
        new LocationCoordinate(56.1612, 15.5869),
        new LocationCoordinate(59.2741, 15.2066)
    };
    RealTimeMap.LoadParameters parameters = null;

    private TreasureMap Map { get; set; }

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationResult currentPosition;
    private List<GeolocationPosition> positionHistory = new List<GeolocationPosition>();
    private IAsyncDisposable geopositionWatcher;

    protected override void OnInitialized()
    {
        Map = new TreasureMap(MapName);
        treasureMapService.AddMap(Map);
        System.Diagnostics.Debug.Print("INITIALIZED");
    }



    protected override async Task OnInitializedAsync()
    {
        var window = await jsR.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        System.Diagnostics.Debug.Print("INITIALIZED ASYNC");

        await GetGeoLocation();

        parameters = new RealTimeMap.LoadParameters()
            {
                location = new RealTimeMap.Location()
                {
                    latitude = currentPosition.Location.Coords.Latitude,
                    longitude = currentPosition.Location.Coords.Longitude,
                 },
                 zoom_level = 17
             };

    }



    public async Task GetGeoLocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
            {
                EnableHighAccuracy = true,
                MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                TimeoutTimeSpan = TimeSpan.FromMinutes(1)
            }
        ));
    }
    public async Task WatchPosition()
    {
        geopositionWatcher = await geolocationWrapper.WatchPosition(async (p) =>
        {
            positionHistory.Add(p.Location);
        });
    }


    // BUG Varför anroppas den här på reload
    public async Task StopWatch()
    {
        await geopositionWatcher.DisposeAsync();
        geopositionWatcher = null;
    }
    public async ValueTask DisposeAsync()
    {
        await StopWatch();
    }

    private void CreateFakeLocation()
    {
        Random random = new Random();
        Locations.Add(new Station() { Location = FakeLocations[random.Next(1, FakeLocations.Count)] });
    }

    private void MoveUp(int index)
    {
        if (index > 0)
        {
            var temp = Locations[index];
            Locations[index] = Locations[index - 1];
            Locations[index - 1] = temp;
        }
    }

    private void MoveDown(int index)
    {
        if (index < Locations.Count - 1)
        {
            var temp = Locations[index];
            Locations[index] = Locations[index + 1];
            Locations[index + 1] = temp;
        }
    }
}
